import { SpecificationVersion, PactV4, MatchersV3 } from "@pact-foundation/pact";
import { ThingAPI } from './thing'

// Extract matchers here to improve readability when used in the test
const { like } = MatchersV3;

// Top level - name of the API
describe("ðŸ§± Thing API", () => {
  // Use the PactV4 class, and serialise the Pact as V4 Pact Specification
  const pact = new PactV4({
    consumer: "ThingConsumer",
    provider: "ThingProvider",
    spec: SpecificationVersion.SPECIFICATION_VERSION_V4,
  });

  // Level 2 - Describe block for the specific API endpoint
  describe("ðŸ”Œ GET /thing/:id", () => {

    // Level 3 - Test block for the specific test case
    test("ðŸ§ª given a valid thing, returns 200", async () => {
      await pact
        .addInteraction()
        .given("a thing with id 1 exists")
        .uponReceiving("a request for a valid thing")
        .withRequest("GET", "/thing/1", (builder) => {
          builder.headers({ Accept: "application/json" });
        })
        .willRespondWith(200, (builder) => {
          builder.jsonBody(
            like({
              id: 1,
              name: "Thing 1",
              price: 100,
            })
          );
        })
        .executeTest(async (mockserver) => {
          const ThingAPI = new ThingAPI(mockserver.url);

          const Thing = await ThingAPI.getThingById(1);

          expect(Thing).toEqual({
            id: 1,
            name: "Some 1",
            price: 100,
          });
        });
    });
  });
});